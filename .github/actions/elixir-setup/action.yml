name: Setup Elixir project
description: Checks out the code, configures Elixir, fetches dependencies, and manages build caching.
inputs:
  elixir-version:
    required: true
    type: string
    description: Elixir version to set up
  otp-version:
    required: true
    type: string
    description: OTP version to set up
  #
  # Inputs below are optional.
  #
  # It's designed to make compiling a reasonably standard Elixir
  # codebase "just work," though there may be speed gains to be had
  # by tweaking these flags.
  #  
  build-deps:
    required: false
    type: boolean
    default: true
    description: True if we should compile dependencies
  build-app:
    required: false
    type: boolean
    default: true
    description: True if we should compile the application itself
  build-flags:
    required: false
    type: string
    default: '--all-warnings'
    description: Flags to pass to mix compile
  install-rebar:
    required: false
    type: boolean
    default: true
    description: By default, we will install Rebar (mix local.rebar --force).
  install-hex:
    required: false
    type: boolean
    default: true
    description: By default, we will install Hex (mix local.hex --force).
  cache-key:
    required: false
    type: string
    default: 'v1'
    description: If you need to reset the cache for some reason, you can change this key.
  with-oban:
    required: false
    type: boolean
    default: false
    description: Add the Oban Pro Hex repository for installing Oban
  oban-key-fingerprint:
    required: false
    type: string
    default: ''
    description: The Oban Pro key fingerprint (required if with-oban = true)
  oban-license-key:
    required: false
    type: string
    default: ''
    description: The Oban Pro license key (required if with-oban = true)
runs:
  using: "composite"
  steps:
  - name: Setup Elixir
    uses: erlef/setup-beam@v1
    with:
      elixir-version: ${{ inputs.elixir-version }}
      otp-version: ${{ inputs.otp-version }}

  - name: Get deps cache
    uses: actions/cache@v2
    with:
      path: deps/
      key: deps-${{ inputs.cache-key }}-${{ runner.os }}-${{ hashFiles('**/mix.lock') }}
      restore-keys: |
        deps-${{ inputs.cache-key }}-${{ runner.os }}-
  
  - name: Get build cache
    uses: actions/cache@v2
    id: build-cache
    with:
      path: _build/${{env.MIX_ENV}}/
      key: build-${{ inputs.cache-key }}-${{ runner.os }}-${{ inputs.otp-version }}-${{ inputs.elixir-version }}-${{ env.MIX_ENV }}-${{ hashFiles('**/mix.lock') }}
      restore-keys: |
        build-${{ inputs.cache-key }}-${{ runner.os }}-${{ inputs.otp-version }}-${{ inputs.elixir-version }}-${{ env.MIX_ENV }}-
  
  #
  # In my experience, I have issues with incremental builds maybe 1 in 100
  # times that are fixed by doing a full recompile.
  # In order to not waste dev time on such trivial issues (while also reaping
  # the time savings of incremental builds for *most* day-to-day development),
  # I force a full recompile only on builds that we retry.
  #
  - name: Clean to rule out incremental build as a source of flakiness
    if: github.run_attempt != '1'
    run: |
      mix deps.clean --all
      mix clean

  - name: Install Rebar
    run: mix local.rebar --force
    if: inputs.install-rebar == 'true'

  - name: Install Hex
    run: mix local.hex --force
    if: inputs.install-hex == 'true'

  - name: Add Oban Pro Hex Repo
    run: |
      mix hex.repo add oban https://getoban.pro/repo \
      --fetch-public-key ${{ inputs.oban-key-fingerprint }} \
      --auth-key ${{ inputs.oban-license-key }}
    if: inputs.with-oban == 'true'

  - name: Install dependencies
    run: mix deps.get

  - name: Compile dependencies
    run: mix deps.compile
    if: inputs.build-deps == 'true'

  - name: Compile application
    run: mix compile ${{ inputs.build-flags }}
    if: inputs.build-app == 'true'
